plugins {
    id 'java'
    id "xyz.wagyourtail.unimined" version "1.1.2-SNAPSHOT" apply false
}

// Edit in gradle.properties
group = project_group
version = "${version_major}.${version_minor}.${version_patch}"

subprojects {
    apply plugin: "xyz.wagyourtail.unimined"
    apply plugin: "java"
    apply plugin: 'maven-publish'

    group = rootProject.group
    version = rootProject.version

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // Add your maven repositories here
    repositories {
        mavenCentral()

        // First Dark Dev Maven. Can be removed
        maven {
            url "https://maven.firstdark.dev/releases"
        }

        // First Dark Dev Mirror maven. Do not remove.
        // It's required by this project to pull in dependencies for the modloaders
        maven {
            url "https://mcentral.firstdark.dev/releases"
        }

        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }

        maven {
            name = "wagyourtail releases"
            url = "https://maven.wagyourtail.xyz/releases"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven/'
        }
        maven {
            name = 'overminddl1'
            url = 'https://gregtech.overminddl1.com/'
            content {
                excludeGroupByRegex "de.oceanlabs.mcp"
            }
        }
        maven {
            name = "GTNH Maven"
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
            allowInsecureProtocol = true
        }
        maven {
            url = "https://jitpack.io"
        }
    }

    dependencies {
        annotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:${jabel_version}"
        compileOnly "com.github.bsideup.jabel:jabel-javac-plugin:${jabel_version}"
    }

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : project.archivesBaseName,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.version,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.version,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version,
                    "MixinConfigs"            : mixin_config,
			        "TweakClass"              : "org.spongepowered.asm.launch.MixinTweaker"
            ])
        }
    }

    /**
     * ===============================================================================
     * =       DO NOT EDIT BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING        =
     * ===============================================================================
     */

    unimined.minecraft(sourceSets.main, true) {
        version minecraft_version

        mappings {
            searge()
            mcp("stable", "12-1.7.10")
            //legacyIntermediary()
            //mapping("net.legacyfabric:yarn:${project.minecraft_version}+build.mcp:v2")
            //legacyYarn("533")
        }
    }

    tasks.withType(JavaCompile).configureEach {
        if (it.name in ["compileMcLauncherJava", "compilePatchedMcJava"]) {
            return
        }

        it.options.encoding = "UTF-8"

        it.sourceCompatibility = 17 // for the IDE support
        it.options.release = 8

        it.javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    clean {
        delete "$rootDir/artifacts"
    }

    if (project.name !== 'Common') {
        tasks.register('delDevJar') {
            doLast {
                def tree = fileTree('build/libs')
                tree.include '**/*-dev-shadow.jar'
                tree.include '**/*-dev.jar'
                tree.include '**/*-all.jar'
                tree.include '**/*-slim.jar'
                tree.each { it.delete() }
            }
        }
        build.finalizedBy delDevJar

        tasks.register('copyAllArtifacts', Copy) {
            from "$buildDir/libs"
            into "$rootDir/artifacts"
            include("*.jar")
        }

        build.finalizedBy(copyAllArtifacts)
    }
}
